#!/bin/bash

# Copyright (c) 2023-2025, NVIDIA CORPORATION. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


set -euxo pipefail

echo "PROLOG_START $(date +%s)"

# Vars without defaults
: "${DGXSYSTEM:?DGXSYSTEM not set}"
: "${CONT:?CONT not set}"
: "${DATADIR:?DATADIR not set}"
: "${WALLTIME_RUNANDTIME:?WALLTIME_RUNANDTIME not set}"

# Vars with defaults
: "${MLPERF_RULESET:=5.0.0}"
: "${MLPERF_SYSTEM_NAME:='unknown'}"
: "${MLPERF_SCALE:='unknown'}"
: "${MLPERF_CLUSTER_NAME:='unknown'}"
: "${MILESTONE_YML:=unknown}"
: "${NEXP:=1}"
: "${NCCL_TEST:=1}"
: "${NCCL_TEST_WALLTIME:=10}"
: "${DATESTAMP:=$(date +'%y%m%d%H%M%S%N')}"
: "${CLEAR_CACHES:=1}"
: "${CHECK_COMPLIANCE:=1}"
: "${POWERLOGDIR:=' '}" # Power traces output dir
: "${POWERCMDDIR:=' '}" # Path to power monitor
: "${DATADIR_VAL:=${DATADIR}}"
: "${MOUNTS:=${DATADIR}:/data,${DATADIR_VAL}:/data_val}"
: "${LOGDIR:=./results}"
: "${EXTRA_ASSETS:=}"

# RUNSUB_DIR is the directory containing the run.sub script, so we can call
# other scripts relative to the location of the run.sub script
if [[ "${SLURM_JOB_ID}" ]]; then
    export RUNSUB_DIR=$(dirname $(scontrol show job "${SLURM_JOB_ID}" | awk -F= '/Command=/{print $2}'))
else
    export RUNSUB_DIR=$(dirname "${BASH_SOURCE[0]}")
fi

##############################################
# Make sure we are using the same pyxis/enroot arguments no matter how the
# system defaults have been set.  This is to avoid problems due to setup
# differences between the systems we test on and other systems.
##############################################
# FIXME: need to use --container-writable because some utilities are writing
# into the container
PYXIS_DEFAULTS=( '--no-container-mount-home' '--container-remap-root' '--container-writable' )

##############################################
# We should invoke srun with exactly one of the following.
##############################################
# to run one task on rank 0: 'srun -N1 -n1'
# to run one task per node: 'srun --ntasks-per-node=1'
# to run one task per gpu: 'srun --ntasks-per-node=${DGXNGPU}'

export MODEL_NAME="recommendation"
export MODEL_FRAMEWORK="pytorch"
LOGBASE="${DATESTAMP}"
export SPREFIX="${MODEL_NAME}_${MODEL_FRAMEWORK}_${DGXNNODES}x${DGXNGPU}x${BATCHSIZE}_${DATESTAMP}"

readonly _logfile_base="${LOGDIR}/${DATESTAMP}"
readonly _cont_name="${MODEL_NAME}_${SLURM_JOB_ID}"
mounts_to_verify="TRAIN_DATA_BIN:/data/train_data.bin VAL_DATA_BIN:/data_val/val_data.bin"

# make sure the results directory exists on the host
( umask 0002; mkdir -p "${LOGDIR}" )

# Setup container
echo MELLANOX_VISIBLE_DEVICES="${MELLANOX_VISIBLE_DEVICES:-}"
srun --mpi="${SLURM_MPI_TYPE:-pmix}" --ntasks-per-node=1 --container-image="${CONT}" --container-name="${_cont_name}" "${PYXIS_DEFAULTS[@]}" true
srun -N1 -n1 --container-name="${_cont_name}" "${PYXIS_DEFAULTS[@]}" ibv_devinfo --list
srun -N1 -n1 --container-name="${_cont_name}" "${PYXIS_DEFAULTS[@]}" nvidia-smi topo -m

set +e
# Check vbios version and fabric integrity
srun --ntasks-per-node=1 nvidia-smi --query-gpu=gpu_name,gpu_bus_id,vbios_version --format=csv
srun -l --ntasks-per-node=1 bash -c "nvidia-smi -q | grep Fabric -A 4 | grep CliqueId"
set -e

if [[ "${SLOW_DATADIR:-}" ]]; then
    # need to make the datadir outside the container, else the mount will fail
    srun --ntasks-per-node=1 mkdir -p "${DATADIR}"
    srun --ntasks-per-node=1 bash -c "lfs pcc status ${SLOW_DATADIR}/train_data.bin ${SLOW_DATADIR}/val_data.bin"
    srun --ntasks-per-node=1 \
	 --container-name="${_cont_name}" "${PYXIS_DEFAULTS[@]}" \
	 --container-mounts="${SLOW_DATADIR}:${SLOW_DATADIR},${DATADIR}:${DATADIR}" \
         bash -c "time fastcp --num-threads=32 --buffer-size 268435456 ${SLOW_DATADIR}/train_data.bin ${DATADIR}/train_data.bin && time fastcp --num-threads=32 --buffer-size 268435456 ${SLOW_DATADIR}/val_data.bin ${DATADIR_VAL}/val_data.bin"
fi

source ${RUNSUB_DIR}/config_mounts.sh

echo "NCCL_TEST = ${NCCL_TEST}"
if [[ ${NCCL_TEST} -eq 1 ]]; then
    set +e
    echo "NCCL_TEST_START_nccl_alltoall_half $(date +%s)"
    (srun --mpi="${SLURM_MPI_TYPE:-pmix}" --ntasks-per-node=1 --time="${NCCL_TEST_WALLTIME}" \
         --container-name="${_cont_name}" "${PYXIS_DEFAULTS[@]}" alltoall_perf_mpi -b 4.1M -e 8.2M -f 2 -d half
    ) |& tee "${LOGDIR}/${SPREFIX}_nccl_alltoall_half.log"
    echo "NCCL_TEST_START_nccl_alltoall_uint32 $(date +%s)"
    (srun --mpi="${SLURM_MPI_TYPE:-pmix}" --ntasks-per-node=1 --time="${NCCL_TEST_WALLTIME}" \
         --container-name="${_cont_name}" "${PYXIS_DEFAULTS[@]}" alltoall_perf_mpi -b 2K -e 8K -f 2 -t ${DGXNGPU} -d uint32
    ) |& tee "${LOGDIR}/${SPREFIX}_nccl_alltoall_uint32.log"
    echo "NCCL_TEST_START_nccl_allreduce $(date +%s)"
    (srun --mpi="${SLURM_MPI_TYPE:-pmix}" --ntasks-per-node=1 --time="${NCCL_TEST_WALLTIME}" \
         --container-name="${_cont_name}" "${PYXIS_DEFAULTS[@]}" all_reduce_perf_mpi -b 38.3M -e 38.3M -t ${DGXNGPU} -d half
    ) |& tee "${LOGDIR}/${SPREFIX}_nccl_allreduce.log"
    echo "NCCL_TEST_STOP $(date +%s)"
    set -e
fi

if [[ "${INIT_EXPECTED_MOUNTS:-0}" -eq 1 ]]; then
    srun -N1 -n1 --container-name="${_cont_name}" "${PYXIS_DEFAULTS[@]}" --container-mounts="${_cont_mounts}" \
        python3 -m mlperf_common.mountcheck --expected_mounts_csv "${LOGDIR}/${SPREFIX}_expected-mounts.csv" \
            --mounts_to_verify $mounts_to_verify --initialize
fi

if [[ "${VERIFY_MOUNTS:-0}" -eq 1 ]]; then
    (srun --ntasks-per-node=1 --container-name="${_cont_name}" "${PYXIS_DEFAULTS[@]}" --container-mounts="${_cont_mounts}" \
        python3 -m mlperf_common.mountcheck --expected_mounts_csv expected-mounts.csv --mounts_to_verify $mounts_to_verify
    ) |& tee "${LOGDIR}/${SPREFIX}_mountcheck.log"
fi

#GPU power measurements
if [ -f "$POWERCMDDIR/power_monitor.sh"  ]; then
    ( umask 0002; mkdir -p "${POWERLOGDIR}" )
    # Measure GPU power on up to 64 nodes.
    if [ ${SLURM_JOB_NUM_NODES} -gt 64 ]; then
    	( srun --overlap --ntasks=64 bash $POWERCMDDIR/power_monitor.sh ) &
    else
	    ( srun --overlap --ntasks-per-node=1 bash $POWERCMDDIR/power_monitor.sh ) &
    fi
fi

# Telemetry
if [[ -f "${TELEMETRY_SCRIPT:-}"  ]]; then
    NODENAME=$(echo "$(hostname)" | sed 's/\..*//')
    ( srun -N1 --overlap bash ${TELEMETRY_SCRIPT} ${LOGDIR}/${SLURM_JOB_ID}_${NODENAME}_telemetry.log ) &
    EXTRA_ASSETS="${EXTRA_ASSETS} --asset /results/${SLURM_JOB_ID}_${NODENAME}_telemetry.log"
fi

#Set GPU clocks for MaxQ and MinEDP run
if [[ "${SET_MAXQ_CLK:-0}" == "1" ]] || [[ "${SET_MINEDP_CLK:-0}" == "1" ]]; then
        if [[ "${SET_MAXQ_CLK}" == "1" ]]; then
                GPC_CLK=${MAXQ_CLK}
        fi
        if [[ "${SET_MINEDP_CLK}" == "1" ]]; then
                GPC_CLK=${MINEDP_CLK}
        fi
	srun --ntasks-per-node=1 bash -c "sudo nvidia-smi -lgc ${GPC_CLK}"
fi

echo "PROLOG_STOP $(date +%s)"

# Run experiments
for _experiment_index in $(seq -w 1 "${NEXP}"); do
    echo "EXPERIMENT_START $(date +%s)"

    (
        echo ":::DLPAL ${CONT} ${SLURM_JOB_ID} ${SLURM_JOB_NUM_NODES} ${SLURM_JOB_NODELIST} ${MLPERF_CLUSTER_NAME} ${DGXSYSTEM}"
        echo ":::SYSJSON $(srun -N1 -n1 --container-name="${_cont_name}" "${PYXIS_DEFAULTS[@]}" mlperf-sysjson.sh)"
        srun -N1 -n1 --container-name="${_cont_name}" "${PYXIS_DEFAULTS[@]}" bash -c 'echo ":::GITCOMMITID ${GIT_COMMIT_ID} ${LAUNCHER_GIT_COMMIT_ID}"'

        if [[ $CLEAR_CACHES == 1 ]]; then
            srun --mpi="${SLURM_MPI_TYPE:-pmix}" --ntasks-per-node=1 bash -c "echo -n 'Clearing cache on ' && hostname && sync && sudo /sbin/sysctl vm.drop_caches=3"
            srun --mpi="${SLURM_MPI_TYPE:-pmix}" --ntasks-per-node=1 --container-name="${_cont_name}" "${PYXIS_DEFAULTS[@]}" python3 -c "
import mlperf_logging.mllog as mllog
mllogger = mllog.get_mllogger()
mllogger.event(key=mllog.constants.CACHE_CLEAR, value=True)"
        fi

        echo "Beginning trial ${_experiment_index} of ${NEXP}"

        set +e
        echo "RUNANDTIME_START $(date +%s)"
        export SEED=$RANDOM
        srun -l --mpi="${SLURM_MPI_TYPE:-pmix}" \
            --ntasks-per-node=1 \
            --time="${WALLTIME_RUNANDTIME}" \
            --container-name="${_cont_name}" "${PYXIS_DEFAULTS[@]}" \
            --container-mounts="${_cont_mounts}" \
            ./run_and_time.sh
        echo "RUNANDTIME_STOP $(date +%s)"
        set -e

    ) |& tee "${_logfile_base}_raw_${_experiment_index}.log"

    # Sorting the MLPerf compliance logs by timestamps
    grep ":::" "${_logfile_base}_raw_${_experiment_index}.log" | sort -k5 -n -s | tee "${_logfile_base}_${_experiment_index}.log"
    # compliance checker
    if [[ "${CHECK_COMPLIANCE}" -eq 1 ]]; then
      srun -N1 -n1 --container-name="${_cont_name}" "${PYXIS_DEFAULTS[@]}" \
           --container-mounts="$(realpath ${LOGDIR}):/results" \
           --container-workdir="/results" \
           python3 -m mlperf_logging.compliance_checker --usage training \
           --ruleset "${MLPERF_RULESET}" \
           --log_output "/results/compliance_${DATESTAMP}.out" \
           "/results/${LOGBASE}_${_experiment_index}.log" \
      || true
      EXTRA_ASSETS="${EXTRA_ASSETS} --asset /results/compliance_${DATESTAMP}.out"
    fi


    echo "EXPERIMENT_STOP $(date +%s)"
done
