#!/bin/bash
#SBATCH --exclusive
#SBATCH --mem=0

# Copyright (c) 2019-2025 NVIDIA CORPORATION. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -eux

echo "PROLOG_START $(date +%s)"

# Vars without defaults
: "${CONT:?CONT not set}"
: "${DGXSYSTEM:?DGXSYSTEM not set}"
: "${WALLTIME_RUNANDTIME:?WALLTIME_RUNANDTIME not set}"

# Vars with defaults
: "${MLPERF_RULESET:=5.0.0}"
: "${MLPERF_SYSTEM_NAME:='unknown'}"
: "${MLPERF_SCALE:='unknown'}"
: "${MLPERF_CLUSTER_NAME:='unknown'}"
: "${MILESTONE_YML:=unknown}"
: "${NEXP:=1}"
: "${CLEAR_CACHES:=1}"
: "${DATESTAMP:=$(date +'%y%m%d%H%M%S%N')}"
: "${CHECK_COMPLIANCE:=1}"
: "${DROPCACHE_CMD:="sudo /sbin/sysctl vm.drop_caches=3"}"
: "${LOGDIR:=./results}"
: "${POWERLOGDIR:=' '}" # Power traces output dir
: "${POWERCMDDIR:=' '}" # Path to power monitor
: "${NSYSCMD:=""}"
: "${NVTX_FLAG:=0}"
: "${TIME_TAGS:=0}"
: "${NCCL_TEST:=1}"
: "${NCCL_TEST_WALLTIME:=10}"
: "${SYNTH_DATA:=0}"
: "${EPOCH_PROF:=0}"
: "${DISABLE_CG:=0}"
: "${WORK_DIR:=/workspace/bert}"
: "${NVMLPERF_NSIGHT_LOCATION:=' '}"
: "${EXTRA_ASSETS:=}"
# Set GPC clock for MaxQ and minEDP
: "${SET_MAXQ_CLK:=0}"
: "${SET_MINEDP_CLK:=0}"

# override enroot's (sometimes in-use) randomly chosen ephemeral port.  29500
# is non-ephemeral and not assigned by the IANA.  If 29500 is in use on your
# cluster for some other service, then choose a different non-ephemeral
# unassigned port from
# https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.txt
# or https://svn.nmap.org/nmap/nmap-services.  The range that needs to be
# avoided is the ephemeral port range, returned by `sysctl
# net.ipv4.ip_local_port_range` (32768-61000 by default).
: "${MASTER_PORT:=29500}"
export MASTER_PORT

export MASTER_ADDR="$(scontrol show hostnames "${SLURM_JOB_NODELIST-}" | head -n1)"
#export MASTER_ADDR=$(ip -4 -o addr | egrep -v 'enp|127.0.0.1|docker' | awk '{print $4}' | awk -F / '{print $1}' | tail -n1)
echo "using MASTER_ADDR \"${MASTER_ADDR}\" of list \"${SLURM_JOB_NODELIST}\""

# This works only for either packed or unpacked data. Needs a fix

if [[ "${SLURM_JOB_ID}" ]]; then
    export RUNSUB_DIR=$(dirname $(scontrol show job "${SLURM_JOB_ID}" | awk -F= '/Command=/{print $2}'))
else
    export RUNSUB_DIR=$(dirname "${BASH_SOURCE[0]}")
fi

##############################################
# Make sure we are using the same pyxis/enroot arguments no matter how the
# system defaults have been set.  This is to avoid problems due to setup
# differences between the systems we test on and other systems.
##############################################
# FIXME: need to use --container-writable because some utilities are writing
# into the container
PYXIS_DEFAULTS=( '--no-container-mount-home' '--container-remap-root' '--container-writable' )

##############################################
# We should invoke srun with exactly one of the following.
##############################################
# to run one task on rank 0: 'srun -N1 -n1'
# to run one task per node: 'srun --ntasks-per-node=1'
# to run one task per gpu: 'srun --ntasks-per-node=${DGXNGPU}'

## do we need to fetch the data from remote disk into local /tmp disk?
#if [[ "${MNT_TARFILE_PATH:-}" ]]; then
#    # make sure we didn't accidentally specify the remote disk as the tmpdir
#    if [[ "${TMP_ROOT_PATH}" == *mnt* ]]; then
#       echo "ERROR: ${TMP_ROOT_PATH} looks like a lustre mount rather than a tmp dir, yet TARFILE_FOR_PREPROC_DATA is set to ${TARFILE_FOR_PREPROC_DATA}!!!"
#       exit 1
#    fi
#    # manage data in tmpdir on every node
#    srun --ntasks-per-node=1 \
#        "${RUNSUB_DIR}/manage-tmp-data" \
#        "${MNT_TARFILE_PATH}" "${TMP_ROOT_PATH}"   \
#        "${TMP_MD5SUM}"
#
#         export EVALDIR="${TMP_ROOT_PATH}/hdf5/eval_4320_shard"
#    #export DATADIR_PHASE2="${TMP_ROOT_PATH}/hdf5/4320_shards_varlength_shuffled"
#    export DATADIR_PHASE2="${TMP_ROOT_PATH}/hdf5/4320_packed_shards"
#    export DATADIR_PHASE2_PACKED="${TMP_ROOT_PATH}/hdf5/4320_packed_shards"
#    export CHECKPOINTDIR_PHASE1="${TMP_ROOT_PATH}/checkpoints/checkpoint_phase1"
#fi

# pyxis sometimes leaves containers lying around which can really confuse things:
cleanup_pyxis() {
    srun --ntasks-per-node=1 /bin/bash -c 'if [[ "$(enroot list)" ]]; then enroot remove -f $(enroot list); fi'
}
cleanup_pyxis

export MODEL_NAME="language_model"
export MODEL_FRAMEWORK="pytorch"
readonly _cont_name="${MODEL_NAME}_${SLURM_JOB_ID}"
LOGBASE="${DATESTAMP}"
export SPREFIX="${MODEL_NAME}_${MODEL_FRAMEWORK}_${DGXNNODES}x${DGXNGPU}x${BATCHSIZE}_${DATESTAMP}"

if [ ${TIME_TAGS} -gt 0 ]; then
    LOGBASE="${SPREFIX}_mllog"
fi
if [ ${NVTX_FLAG} -gt 0 ]; then
    if [[ "$LOGBASE" == *'_'* ]];then
        LOGBASE="${LOGBASE}_nsys"
    else
        LOGBASE="${SPREFIX}_nsys"
    fi

    if [[ ! -d "${NVMLPERF_NSIGHT_LOCATION}" ]]; then
        echo "[WARNING] $NVMLPERF_NSIGHT_LOCATION doesn't exist on this system! Will use it the nsys inside docker" 1>&2
    fi
fi
if [ ${SYNTH_DATA} -gt 0 ]; then
    if [[ "$LOGBASE" == *'_'* ]];then
        LOGBASE="${LOGBASE}_synth"
    else
        LOGBASE="${SPREFIX}_synth"
    fi
fi
if [ ${EPOCH_PROF} -gt 0 ]; then
    if [[ "$LOGBASE" == *'_'* ]];then
        LOGBASE="${LOGBASE}_epoch"
    else
        LOGBASE="${SPREFIX}_epoch"
    fi
fi
if [ ${DISABLE_CG} -gt 0 ]; then
    EXTRA_PARAMS=$(echo $EXTRA_PARAMS | sed 's/--use_cuda_graph//')
    if [[ "$LOGBASE" == *'_'* ]];then
        LOGBASE="${LOGBASE}_nocg"
    else
        LOGBASE="${SPREFIX}_nocg"
    fi
fi

if [ ${NVTX_FLAG--1} -gt 0 ] ||  [ ${TIME_TAGS--1} -gt 0 ]; then
export MAX_STEPS=100
fi

readonly LOG_FILE_BASE="${LOGDIR}/${LOGBASE}"

cleanup_containers() {
    cleanup_pyxis
}
trap cleanup_containers TERM EXIT

echo "CI directory structure\n"
echo $(ls)

source ${RUNSUB_DIR}/config_mounts.sh

# Setup directories
( umask 0002; mkdir -p "${LOGDIR}" )

# Setup container
echo MELLANOX_VISIBLE_DEVICES="${MELLANOX_VISIBLE_DEVICES:-}"
srun --ntasks-per-node=1 --container-image="${CONT}" --container-name="${_cont_name}" "${PYXIS_DEFAULTS[@]}" true
srun -N1 -n1 --container-name="${_cont_name}" "${PYXIS_DEFAULTS[@]}" ibv_devinfo --list
srun -N1 -n1 --container-name="${_cont_name}" "${PYXIS_DEFAULTS[@]}" nvidia-smi topo -m

set +e
# Check vbios version and fabric integrity
srun --ntasks-per-node=1 nvidia-smi --query-gpu=gpu_name,gpu_bus_id,vbios_version --format=csv
srun -l --ntasks-per-node=1 bash -c "nvidia-smi -q | grep Fabric -A 4 | grep CliqueId"
set -e

echo "NCCL_TEST = ${NCCL_TEST}"
if [[ ${NCCL_TEST} -eq 1 ]]; then
    set +e
    echo "NCCL_TEST_START $(date +%s)"
    (srun --mpi="${SLURM_MPI_TYPE:-pmix}"  --ntasks-per-node="${DGXNGPU}" \
     --container-name="${_cont_name}" "${PYXIS_DEFAULTS[@]}" --time="${NCCL_TEST_WALLTIME}" all_reduce_perf_mpi -b 21M -e 672M -d half -G 1 -f 2
    ) |& tee "${LOGDIR}/${SPREFIX}_nccl.log"
    echo "NCCL_TEST_STOP $(date +%s)"
    set -e
    EXTRA_ASSETS="${EXTRA_ASSETS} --asset /results/${SPREFIX}_nccl.log"
fi

if [[ "${GET_MOUNT_INFO:-0}" -eq 1 ]]; then
    (srun -N1 -n1 --container-name="${_cont_name}" "${PYXIS_DEFAULTS[@]}" \
        --container-mounts="${_cont_mounts}"  \
        python3 -c "from mlperf_common.mountcheck import main; main(${cont_mounts_to_verify})"
    ) |& tee "${LOGDIR}/cont-mount-info.json"
fi

if [[ "${VERIFY_MOUNT:-0}" -eq 1 ]]; then
    (srun --ntasks-per-node=1 --container-name="${_cont_name}" "${PYXIS_DEFAULTS[@]}" \
        --container-mounts="${_cont_mounts}"  \
        python3 -c "from mlperf_common.mountcheck import main; main('cont-mount-info.json', check=True)"
    ) |& tee "${LOGDIR}/${SPREFIX}_mountcheck.log"
fi

#GPU power measurements
if [ -f "$POWERCMDDIR/power_monitor.sh"  ]; then
    ( umask 0002; mkdir -p "${POWERLOGDIR}" )
    # Measure GPU power on up to 64 nodes.
    if [ ${SLURM_JOB_NUM_NODES} -gt 64 ]; then
    	( srun --overlap --ntasks=64 bash $POWERCMDDIR/power_monitor.sh ) &
    else
	( srun --overlap --ntasks-per-node=1 bash $POWERCMDDIR/power_monitor.sh ) &
    fi
fi

# Telemetry
if [[ -f "${TELEMETRY_SCRIPT:-}"  ]]; then
    NODENAME=$(echo "$(hostname)" | sed 's/\..*//')
    ( srun -N1 --overlap bash ${TELEMETRY_SCRIPT} ${LOGDIR}/${SLURM_JOB_ID}_${NODENAME}_telemetry.log ) &
    EXTRA_ASSETS="${EXTRA_ASSETS} --asset /results/${SLURM_JOB_ID}_${NODENAME}_telemetry.log"
fi

#Set GPU clocks for MaxQ and MinEDP run
if [[ "${SET_MAXQ_CLK}" == "1" ]] || [[ "${SET_MINEDP_CLK}" == "1" ]]; then
        if [[ "${SET_MAXQ_CLK}" == "1" ]]; then
                GPC_CLK=${MAXQ_CLK}
        fi
        if [[ "${SET_MINEDP_CLK}" == "1" ]]; then
                GPC_CLK=${MINEDP_CLK}
        fi
	srun --ntasks-per-node=1 bash -c "sudo nvidia-smi -lgc ${GPC_CLK}"
fi

echo "PROLOG_STOP $(date +%s)"

# Run experiments
for _experiment_index in $(seq -w 1 "${NEXP}"); do
    echo "EXPERIMENT_START $(date +%s)"

    (
        echo "Beginning trial ${_experiment_index} of ${NEXP}"
        echo ":::DLPAL ${CONT} ${SLURM_JOB_ID} ${SLURM_JOB_NUM_NODES} ${SLURM_JOB_NODELIST} ${MLPERF_CLUSTER_NAME} ${DGXSYSTEM}"
        echo ":::SYSJSON $(srun -N1 -n1 --container-name="${_cont_name}" "${PYXIS_DEFAULTS[@]}" mlperf-sysjson.sh)"
        srun -N1 -n1 --container-name="${_cont_name}" "${PYXIS_DEFAULTS[@]}" bash -c 'echo ":::GITCOMMITID ${GIT_COMMIT_ID} ${LAUNCHER_GIT_COMMIT_ID}"'

        # Clear caches
        if [ "${CLEAR_CACHES}" -eq 1 ]; then
            srun --ntasks-per-node=1 bash -c "echo -n 'Clearing cache on ' && hostname && sync && ${DROPCACHE_CMD}"
            srun --ntasks-per-node=1 --container-name="${_cont_name}" "${PYXIS_DEFAULTS[@]}" python -c "
from mlperf_logger import mllogger
mllogger.event(key=mllogger.constants.CACHE_CLEAR, value=True)"
        fi

        # Run experiment
        set +e
        echo "RUNANDTIME_START $(date +%s)"
        srun -l --mpi=none \
            --ntasks-per-node="${DGXNGPU}" \
            --time="${WALLTIME_RUNANDTIME}" \
            --container-name="${_cont_name}" "${PYXIS_DEFAULTS[@]}" \
            --container-mounts="${_cont_mounts}" \
            --container-workdir=${WORK_DIR} \
            --container-env=MASTER_PORT,MASTER_ADDR \
             slurm2pytorch "./run_and_time.sh"
        echo "RUNANDTIME_STOP $(date +%s)"
        set -e

    ) |& tee "${LOG_FILE_BASE}_${_experiment_index}.log"

    # compliance checker
    if [[ "${CHECK_COMPLIANCE}" -eq 1 ]]; then
      srun -N1 -n1 --container-name="${_cont_name}" "${PYXIS_DEFAULTS[@]}" \
           --container-mounts="$(realpath ${LOGDIR}):/results" \
           --container-workdir="/results" \
           python3 -m mlperf_logging.compliance_checker --usage training \
           --ruleset "${MLPERF_RULESET}" \
           --log_output "/results/compliance_${DATESTAMP}.out" \
           "/results/${LOGBASE}_${_experiment_index}.log" \
      || true
      EXTRA_ASSETS="${EXTRA_ASSETS} --asset /results/compliance_${DATESTAMP}.out"
    fi


    echo "EXPERIMENT_STOP $(date +%s)"
done

# Cleanup: performed by cleanup_containers (see above) on EXIT trap
